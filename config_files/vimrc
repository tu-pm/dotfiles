" Plugins
filetype plugin indent on    					        " required
call plug#begin('~/.vim/plugged')
Plug 'scrooloose/nerdtree'          	                "	File management tree
Plug 'scrooloose/nerdcommenter'          	            "	Code commenter
Plug 'fatih/vim-go'                 	                " Vim Go plugin
Plug 'vim-airline/vim-airline'				            " Status bar
Plug 'vim-airline/vim-airline-themes'                   " Status bar themes
Plug 'ajmwagar/vim-deus'							    " Deus theme
Plug 'neoclide/coc.nvim', {'branch': 'release'}         " Vim intellisense
Plug 'tpope/vim-fugitive'                               " Managing Git
Plug 'chamindra/marvim'                               " Managing macros
" JS + TS Plugins
Plug 'leafgarland/typescript-vim'
Plug 'peitalin/vim-jsx-typescript'
Plug 'lepture/vim-jinja'                                " Jinja syntax
Plug '907th/vim-auto-save'

call plug#end()

" Plugin Configurations

" > UltiSnips Configurations
let g:UltiSnipsEditSplit="vertical"

" > NERDTree Configurations
map <F10> :NERDTreeToggle<CR>

" > NERDCommenter Configurations
map <C-_> <plug>NERDCommenterToggle
imap <C-_> <ESC><plug>NERDCommenterToggle

" > Airline Configurations
let g:airline_theme="deus"

" > Deus theme configurations
" >> Make spelling works with current theme
augroup my_colors
  autocmd!
  autocmd ColorScheme deus hi SpellBad cterm=reverse
augroup END
" >> Proper coloring inside terminal
set t_Co=256
set termguicolors
let &t_8f = "\<Esc>[38;2;%lu;%lu;%lum"
let &t_8b = "\<Esc>[48;2;%lu;%lu;%lum"
set background=dark    " Setting dark mode
colorscheme deus
let g:deus_termcolors=256

" > Vim autosave
let g:auto_save = 0
augroup ft_markdown
  au!
  au FileType markdown let b:auto_save = 1
augroup END

" > Vim-go Configurations
let g:go_def_mapping_enabled = 0

" > Coc.nvim Configurations
" Map leader key to ','
let mapleader = ","

" if hidden is not set, TextEdit might fail.
set hidden

" You will have bad experience for diagnostic messages when it's default 4000.
set updatetime=300

" don't give |ins-completion-menu| messages.
set shortmess+=c

" Use tab for trigger completion with characters ahead and navigate.
" Use command ':verbose imap <tab>' to make sure tab is not mapped by other plugin.
inoremap <silent><expr> <TAB>
      \ pumvisible() ? "\<C-n>" :
      \ <SID>check_back_space() ? "\<TAB>" :
      \ coc#refresh()
inoremap <expr><S-TAB> pumvisible() ? "\<C-p>" : "\<C-h>"

function! s:check_back_space() abort
  let col = col('.') - 1
  return !col || getline('.')[col - 1]  =~# '\s'
endfunction

" Use <c-space> to trigger completion.
inoremap <silent><expr> <c-space> coc#refresh()

" Use <cr> to confirm completion, `<C-g>u` means break undo chain at current position.
" Coc only does snippet and additional edit on confirm.
inoremap <expr> <cr> pumvisible() ? "\<C-y>" : "\<C-g>u\<CR>"
" Or use `complete_info` if your vim support it, like:
" inoremap <expr> <cr> complete_info()["selected"] != "-1" ? "\<C-y>" : "\<C-g>u\<CR>"

" Use `[g` and `]g` to navigate diagnostics
nmap <silent> [g <Plug>(coc-diagnostic-prev)
nmap <silent> ]g <Plug>(coc-diagnostic-next)

" Remap keys for gotos
nmap <silent> gd <Plug>(coc-definition)
nmap <silent> gy <Plug>(coc-type-definition)
nmap <silent> gi <Plug>(coc-implementation)
nmap <silent> gr <Plug>(coc-references)

" Use K to show documentation in preview window
nnoremap <silent> K :call <SID>show_documentation()<CR>

function! s:show_documentation()
  if (index(['vim','help'], &filetype) >= 0)
    execute 'h '.expand('<cword>')
  else
    call CocAction('doHover')
  endif
endfunction

" Highlight symbol under cursor on CursorHold
autocmd CursorHold * silent call CocActionAsync('highlight')

" Remap for rename current word
nmap <leader>rn <Plug>(coc-rename)

" Remap for format selected region
xmap <leader>f  <Plug>(coc-format-selected)
nmap <leader>f  <Plug>(coc-format-selected)

augroup mygroup
  autocmd!
  " Setup formatexpr specified filetype(s).
  autocmd FileType typescript,json setl formatexpr=CocAction('formatSelected')
  " Update signature help on jump placeholder
  autocmd User CocJumpPlaceholder call CocActionAsync('showSignatureHelp')
augroup end

" Remap for do codeAction of selected region, ex: `<leader>aap` for current paragraph
xmap <leader>a  <Plug>(coc-codeaction-selected)
nmap <leader>a  <Plug>(coc-codeaction-selected)

" Remap for do codeAction of current line
nmap <leader>ac  <Plug>(coc-codeaction)
" Fix autofix problem of current line
nmap <leader>qf  <Plug>(coc-fix-current)

" Create mappings for function text object, requires document symbols feature of languageserver.
xmap if <Plug>(coc-funcobj-i)
xmap af <Plug>(coc-funcobj-a)
omap if <Plug>(coc-funcobj-i)
omap af <Plug>(coc-funcobj-a)

" Use <C-d> for select selections ranges, needs server support, like: coc-tsserver, coc-python
nmap <silent> <C-d> <Plug>(coc-range-select)
xmap <silent> <C-d> <Plug>(coc-range-select)

" Use `:Format` to format current buffer
command! -nargs=0 Format :call CocAction('format')

" Use `:Fold` to fold current buffer
command! -nargs=? Fold :call     CocAction('fold', <f-args>)

" use `:OR` for organize import of current buffer
command! -nargs=0 OR   :call     CocAction('runCommand', 'editor.action.organizeImport')

" Add status line support, for integration with other plugin, checkout `:h coc-status`
set statusline^=%{coc#status()}%{get(b:,'coc_current_function','')}

" Using CocList
" Show all diagnostics
nnoremap <silent> <space>a  :<C-u>CocList diagnostics<cr>
" Manage extensions
nnoremap <silent> <space>e  :<C-u>CocList extensions<cr>
" Show commands
nnoremap <silent> <space>c  :<C-u>CocList commands<cr>
" Find symbol of current document
nnoremap <silent> <space>o  :<C-u>CocList outline<cr>
" Search workspace symbols
nnoremap <silent> <space>s  :<C-u>CocList -I symbols<cr>
" Do default action for next item.
nnoremap <silent> <space>j  :<C-u>CocNext<CR>
" Do default action for previous item.
nnoremap <silent> <space>k  :<C-u>CocPrev<CR>
" Resume latest coc list
nnoremap <silent> <space>p  :<C-u>CocListResume<CR>

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

" Indent using 4 spaces
set ts=4 sw=4 expandtab

" Use terminal theme instead of byobu
set background=dark

" Enable syntax highlighting
set syntax=enable
syntax on

" Smart way to move between splits
map <C-j> <C-W>j
map <C-k> <C-W>k
map <C-h> <C-W>h
map <C-l> <C-W>l

" Autoclosing brackets
inoremap ( ()<left>
inoremap [ []<left>
inoremap { {}<left>

" Enable line numbering
set number

" Toggle line number
map <leader>ln :set invnumber<CR>

" Toggle paste mode
set pastetoggle=<leader>p

" Trim trailing whitespaces on save
autocmd BufWritePre * %s/\s\+$//e

" Pressing ,ss will toggle and untoggle spell checking
map <leader>ss :setlocal spell!<cr>

" Turn backup off, since most stuff is in SVN, git et.c anyway...
set nobackup
set nowritebackup
set nowb
set noswapfile

" Disable bold font
set t_md=

" Highlight search
set hlsearch

" Unhighlight searched patterns by pressing Space key in normal mode
:noremap <silent> <Space> :silent noh<Bar>echo<CR>

" Replace visual selected text without yanking it
vnoremap p "_dP

" Make backspace works like other editors
set backspace=indent,eol,start

" Return to last edit position when opening files (You want this!)
au BufReadPost * if line("'\"") > 1 && line("'\"") <= line("$") | exe "normal! g'\"" | endif

" Copy visually-selected text to system clipboard
vmap Y "+y

" Enable moving cursor using mouse
set mouse=a

" Word wrapping
set wrap
set linebreak
