"====================================================================
" PLUGINS
filetype plugin indent on                               " required
call plug#begin('~/.vim/plugged')
"====================================================================
" 1. General Plugins

" >> Directory tree
Plug 'scrooloose/nerdtree'

" >> Code commenter
Plug 'scrooloose/nerdcommenter'

" >> Status bar and themes
Plug 'vim-airline/vim-airline'
Plug 'vim-airline/vim-airline-themes'

" >> Deus theme
Plug 'ajmwagar/vim-deus'

" >> Managing Git
Plug 'tpope/vim-fugitive'

" >> Auto-close quotes and brackets
Plug 'Raimondi/delimitMate'

" >> Vim surround objects
Plug 'tpope/vim-surround'

" >> Vim indent objects
Plug 'michaeljsmith/vim-indent-object'

" >> Snippets
Plug 'SirVer/ultisnips'

"====================================================================
" 2. Language-specific plugins

" a. Jinja plugins
" >> Jinja file type
Plug 'lepture/vim-jinja'

" b. Python plugins
" >> Properly indenting python files
Plug 'Vimjas/vim-python-pep8-indent'

" c. PlainTask plugins
" >> PlainTask file type
Plug 'tu-pm/plaintasks.vim'

" d. Markdown plugins
" >> Markdown file type
Plug 'plasticboy/vim-markdown'

call plug#end()
"====================================================================
" PLUGIN CONFIGS

" >> nerdtree
nmap <F10> :NERDTreeToggle<CR>

" >> nerdcommenter
map <C-_> <plug>NERDCommenterToggle

" >> vim-airline
let g:airline_theme="deus"

" >> deus theme
augroup my_colors
  autocmd!
  autocmd ColorScheme deus hi SpellBad cterm=reverse
augroup END
set t_Co=256
set termguicolors
let &t_8f = "\<Esc>[38;2;%lu;%lu;%lum"
let &t_8b = "\<Esc>[48;2;%lu;%lu;%lum"
set background=dark    " Setting dark mode
colorscheme deus
let g:deus_termcolors=256

" >> vim-markdown
let g:vim_markdown_folding_disabled = 1

" >> ultisnips
let g:UltiSnipsEditSplit="vertical"

"====================================================================
" USER CONFIGS

"====================================================================
" 1. Settings

" >> Indent using 4 spaces
set ts=4 sw=4 expandtab

" >> Use terminal theme instead of byobu
set background=dark

" >> Enable syntax highlighting
set syntax=enable
syntax on

" >> Turn backup off, since most stuff is in SVN, git et.c anyway...
set nobackup
set nowritebackup
set nowb
set noswapfile

" >> Disable bold font
set t_md=

" >> Highlight search
set hlsearch

" >> Make backspace works like other editors
set backspace=indent,eol,start

" >> Break line preserving words
set wrap
set linebreak

"====================================================================
" 2. Mappings

" >> Map leader key to ','
let mapleader = ","

" >> Smart way to move between splits
map <C-j> <C-W>j
map <C-k> <C-W>k
map <C-h> <C-W>h
map <C-l> <C-W>l

" >> Unhighlight searched patterns
:noremap <silent> <Space> :silent noh<Bar>echo<CR>

" >> Replace visual selected text without yanking it
vnoremap p "_dP

" >> Toggle spell checking
map <leader>ss :setlocal spell!<cr>

" >> Toggle line number
map <leader>ln :set invnumber<CR>

" >> Rename local variables
nnoremap gr gd:call Rename()<CR>
nnoremap gR gD:call Rename()<CR>

"====================================================================
" 3. Autocmds

" >> Indent using two spaces in yaml files
autocmd FileType yaml setlocal ts=2 sw=2

" >> Trim trailing whitespaces on save
autocmd BufWritePre * %s/\s\+$//e
"====================================================================
" FUNCTIONS

" >> Rename a variable in current scope
" *Note: Scopes are identified by indentation level
function! Rename()
    let old_name = expand("<cword>")
    let new_name = input("New variable name: ")
    call feedkeys("vii:s/\\<" . old_name . "\\>/" . new_name . "/g\<CR>")
endfunction

